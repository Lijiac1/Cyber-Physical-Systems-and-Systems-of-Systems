# Copyright (C) 2022  Christian Berger
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: docker:19.03.3

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  CI_BUILDX_ARCHS: "linux/amd64,linux/arm64,linux/arm/v7"
  BUILDX_URL: "https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64"

cache:
  paths:
    - $CI_PROJECT_DIR/cpp-opencv/rec_file/csvfile/*.csv
services:
  - name: docker:19.03.3-dind


stages:
  - build
  - deploy

# Display information before we start the build.
before_script:
  - docker image prune -f
  - docker info
  - cd cpp-opencv/rec_file/csvfile
  - ls
  - docker pull pavlov99/gnuplot
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - cd video-replay
  - docker build -t video-replay:latest -f Dockerfile .
  - cd ..
  - cd cpp-opencv
# This section describes what shall be done to build and test the project.
build:
  only:
    - branches
  tags:
    - docker-build
  stage: build
  script:
    - docker build -t group-14:latest -f Dockerfile .
    - cd rec_file
    # test with 144821.rec
    - docker run --rm -d --net=host --ipc=host -v /tmp:/tmp -v $PWD:/host -w /host video-replay:latest --cid=253 --name=144821 144821.rec
    - docker run -t --name mytest1 --net=host --ipc=host -e DISPLAY=$DISPLAY -v /tmp:/tmp group-14:latest --cid=253 --name=144821 --width=640 --height=480 
    - docker cp mytest1:/usr/bin/outPut.csv  .
    - mv outPut.csv csvfile/144821.csv
    - cd csvfile
    - docker run --rm --volume $(pwd):/tmp -w /tmp pavlov99/gnuplot gnuplot rec.gnuplot
    - ls
    # test with 145043.rec
    # - docker run --rm -d --net=host --ipc=host -v /tmp:/tmp -v $PWD:/host -w /host video-replay:latest --cid=253 --name=145043 145043.rec
    # - docker run -t --name mytest2 --net=host --ipc=host -e DISPLAY=$DISPLAY -v /tmp:/tmp group-14:latest --cid=253 --name=145043 --width=640 --height=480 
    # - docker cp mytest2:/usr/bin/outPut.csv .
    # - mv outPut.csv 145043.csv
    # test with 145233.rec
    # - docker run --rm -d --net=host --ipc=host -v /tmp:/tmp -v $PWD:/host -w /host video-replay:latest --cid=253 --name=145233 145233.rec
    # - docker run -t --name mytest3 --net=host --ipc=host -e DISPLAY=$DISPLAY -v /tmp:/tmp group-14:latest --cid=253 --name=145233 --width=640 --height=480 
    # - docker cp mytest3:/usr/bin/outPut.csv .
    # - mv outPut.csv 145233.csv
    # test with 145641.rec
    # - docker run --rm -d --net=host --ipc=host -v /tmp:/tmp -v $PWD:/host -w /host video-replay:latest --cid=253 --name=145641 145641.rec
    # - docker run -t --name mytest4 --net=host --ipc=host -e DISPLAY=$DISPLAY -v /tmp:/tmp group-14:latest --cid=253 --name=145641 --width=640 --height=480 
    # - docker cp mytest4:/usr/bin/outPut.csv .
    # - mv outPut.csv 145641.csv
    # test with 150001.rec
    # - docker run --rm -d --net=host --ipc=host -v /tmp:/tmp -v $PWD:/host -w /host video-replay:latest --cid=253 --name=150001 150001.rec
    # - docker run -t --name mytest5 --net=host --ipc=host -e DISPLAY=$DISPLAY -v /tmp:/tmp group-14:latest --cid=253 --name=150001 --width=640 --height=480 
    # - docker cp mytest5:/usr/bin/outPut.csv .
    # - mv outPut.csv 150001.csv
    - mv 144821.csv 144821_previous.csv
    - ls
    # - mv 145043.csv 145043_previous.csv
    # - mv 145233.csv 145233_previous.csv
    # - mv 145641.csv 145641_previous.csv
    # - mv 150001.csv 150001_previous.csv
  artifacts:
    name: performance-test
    expire_in: 2 day
    paths:
      - $CI_PROJECT_DIR/cpp-opencv/rec_file/csvfile/

# This section describes what shall be done to deploy artefacts from the project.
release:
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - wget -O ~/.docker/cli-plugins/docker-buildx $BUILDX_URL
    - chmod 755 ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx create --name platformbuilder --use
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx inspect --bootstrap
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx ls df -h
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  only:
    refs:
      - tags
    variables:
      - $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+$/  
  tags:
    - docker-build
  stage: deploy
  script:
    #- docker build -f Dockerfile -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" .
    #- docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG"
   # - docker build -f Dockerfile .
   - cd cpp-opencv  
   - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --platform $CI_BUILDX_ARCHS -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" --push .
  when: on_success